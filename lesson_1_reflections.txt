How did viewing a diff between two versions of a file help you see the bug that was introduced?
It helped focusing on the changes (and ignoring the rest of the content).

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
It would help understanding how the file evolved, trace back all steps in its evolution, each step a simple piece of
the total complexity contained in it.

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git,
vs having versions automatically saved, like Google Docs does?
Pro: you can choose to commit only finished work.
Pro: you have less commits (less clutter) 
Con: you might forget to commit something.

Why do you think some version control systems, like Git, allow saving multiple files in one commit, 
while others, like Google Docs, treat each file separately?
Sometimes a file is a single logical unit. Sometimes a logical entity is split in multiple files, based
on different criteria (type of the content).

How can you use the commands git log and git diff to view the history of files?
git log shows you the commit hashes; git diff shows you the differences between 
two commits identified by their hashes.

How might using version control make you more confident to make changes that could break something?
If you break something you can easily restore a previous "good" state; as such you worry 
less about breaking something and you attempt more, bigger changes.

Now that you have your workspace set up, what do you want to try using Git for?
I want to use it for a lot of things, mostly c++ and java code.
